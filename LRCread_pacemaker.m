function pacemaker = LRCread_pacemaker(fileID)
%LRCREAD_PACEMAKER Replace with native C functions
%   For use with MATLAB only. DO NOT use for codegen.

[runTimeUTC,runTimeOffset,version,model,x0,xc0,t0,xn,xcn,tn] = importfile(fileID);

pacemaker = struct(                             ...
    'runTimeUTC',       double(runTimeUTC),      ...
    'runTimeOffset',	single(runTimeOffset),	...
    'version',          char(version),          ...
    'model',            char(model),            ...
    'x0',	double(x0),     ...
    'xc0',	double(xc0),	...
    't0',	double(t0),      ...
    'xn',	double(xn),     ...
    'xcn',	double(xcn),	...
    'tn',	double(tn)       ...
    );

end


function [runTimeUTC,runTimeOffset,version,model,x0,xc0,t0,xn,xcn,tn] = importfile(fileID)
%IMPORTFILE Import numeric data from a text file as column vectors.
%   [RUNTIMEUTC,RUNTIMEOFFSET,VERSION1,MODEL,X0,XC0,T0,XN,XCN,TN] =
%   IMPORTFILE(FILENAME) Reads data from text file FILENAME for the default
%   selection.
%
%   [RUNTIMEUTC,RUNTIMEOFFSET,VERSION1,MODEL,X0,XC0,T0,XN,XCN,TN] =
%   IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows STARTROW
%   through ENDROW of text file FILENAME.
%
% Example:
%   [runTimeUTC,runTimeOffset,version1,model,x0,xc0,t0,xn,xcn,tn] =
%   importfile('tp068d9eb8_64a7_4f78_89c8_245f911cd736.csv',2, 2);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2015/06/02 16:30:57

%% Initialize variables.
delimiter = ',';
startRow = 2;
endRow = inf;

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,5,6,7,8,9,10]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(thousandsRegExp, ',', 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end


%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [1,2,5,6,7,8,9,10]);
rawCellColumns = raw(:, [3,4]);


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Allocate imported array to column variable names
runTimeUTC = cell2mat(rawNumericColumns(:, 1));
runTimeOffset = cell2mat(rawNumericColumns(:, 2));
version = rawCellColumns(:, 1);
model = rawCellColumns(:, 2);
x0 = cell2mat(rawNumericColumns(:, 3));
xc0 = cell2mat(rawNumericColumns(:, 4));
t0 = cell2mat(rawNumericColumns(:, 5));
xn = cell2mat(rawNumericColumns(:, 6));
xcn = cell2mat(rawNumericColumns(:, 7));
tn = cell2mat(rawNumericColumns(:, 8));

end